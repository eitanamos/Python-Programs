HANGMAN_ASCII_ART = '''
    _    _
   | |  | |
   | |__| | __ _ _ __   __ _ _ __ ___   __ _ _ __
   |  __  |/ _' | '_ \ / _' | '_ ' _ \ / _' | '_ \\
   | |  | | (_| | | | | (_| | | | | | | (_| | | | |
   |_|  |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|
                        __/ |
                       |___/
    6
                       '''
VAR_I = 1
print(HANGMAN_ASCII_ART)

file_path = input('file_path: ')
index = int(input('index: '))

print("Let's start!")
print('''
    x-------x
    ''')

def choose_word(file_path, index):
    file_object = open(file_path, 'r')
    file_object_list = list(file_object)
    b =str(file_object_list).strip('[]')
    b = b.strip(" '' ")
    c = b.split()
    uniq =[]
    for i in c:
        if i not in uniq:
            uniq.append(i)
    d = len(uniq)
    if index > len(c):
        number = index% len(c)
        number = number -1

    else:
        number = index -1

    e = c[number]
    z = (d, e)
    return e
word_name = choose_word(file_path, index)
print('_ ' * len(word_name))

old_letters_guessed = []
letter_guessed = input('Guess a letter: ')


# בודק שהאות תקינה
def is_valid_input(letter_guessed):
    if len(letter_guessed) > 1:
        if letter_guessed.isalpha():
            return False
        else:
            return False
    elif len(letter_guessed) == 1:
        if letter_guessed.isalpha():
            return True
        else:
            return False

#בודק שהאות לא נמצאת באותיות
def check_valid_input (letter_guessed, old_letters_guessed):
    if is_valid_input(letter_guessed) == True:
        return True
    else:
        return False
def show_hidden_word(secret_word, old_letters_guessed):
    secret_word1 = list(secret_word)
    hidden = '-' * len(secret_word)
    hidden1 = list(hidden)
    for i in old_letters_guessed:
        if i in secret_word1:
           a = [j for j, n in enumerate(secret_word1) if n == i]
           for k in a:
               hidden1[k] = i
               hidden2 = ('').join(hidden1)
               hidden3 = str(hidden2)

    return hidden3

def print_hangman(num_of_tries):
    HANGMAN_PHOTOS = {
        '''picture 1''': '''x-------x''',
        '''picture 2''':
            '''
               x-------x
               |
               |
               |
               |
               |  
               '''
        ,
        '''picture 3''':
            '''
                x-------x
                |       |
                |       0
                |
                |
                |
                ''',
        '''picture 4''':
            '''
                x-------x
                |       |
                |       0
                |       |
                |
                |
                '''
        ,
        '''picture 5''':
            '''
                x-------x
                |       |
                |       0
                |      /|\\
                |
            '''
        ,
        '''picture 6''':
            '''
                x-------x
                |       |
                |       0
                |      /|\\
                |      /
                |
            '''
        ,
        '''picture 7''':
            '''
                x-------x
                |       |
                |       0
                |      /|\\
                |      / \\
                |
            '''
    }
    if num_of_tries == 1:
        return HANGMAN_PHOTOS['''picture 2''']
    elif num_of_tries == 2:
        return HANGMAN_PHOTOS['''picture 3''']
    elif num_of_tries == 3:
        return HANGMAN_PHOTOS['''picture 4''']
    elif num_of_tries == 4:
        return HANGMAN_PHOTOS['''picture 5''']
    elif num_of_tries == 5:
        return HANGMAN_PHOTOS['''picture 6''']
    elif num_of_tries == 6:
        return HANGMAN_PHOTOS['''picture 7''']
def try_update_letter_guessed(letter_guessed, old_letters_guessed):
    global VAR_I
    while (not(check_valid_input (letter_guessed, old_letters_guessed) == True and letter_guessed.lower() not in old_letters_guessed)):
        old_letters_guessed_sorted = sorted(old_letters_guessed, key=str.lower)
        old_letters_guessed_sorted_with_arrows = "->".join(old_letters_guessed_sorted)
        X = 'X'
        print(X + '\n' + str(old_letters_guessed_sorted_with_arrows))
        letter_guessed = input('Guess a letter: ')

    old_letters_guessed.append(letter_guessed.lower())
    if letter_guessed.lower() not in list(word_name):
        VAR_I = VAR_I + 1
        return print_hangman(VAR_I)
    else:
        return show_hidden_word(word_name, old_letters_guessed)

#בודק אם ניצחת
def check_win(secret_word, old_letters_guessed):
    for i in secret_word:
        if not (i in old_letters_guessed):
            return False
    return True

def check_found(secret_word, old_letters_guessed):
    for i in secret_word:
        if i in old_letters_guessed:
            return True
    return False

def len_wrong(secret_word, old_letters_guessed):
    len_word = 0
    for i in old_letters_guessed:
        if not (i in secret_word):
            len_word += 1
    return len_word


while(len_wrong(word_name,old_letters_guessed) <5):
    print(try_update_letter_guessed(letter_guessed, old_letters_guessed))
    if check_win(word_name, old_letters_guessed):
        print("WIN")
        break
    if len_wrong(word_name,old_letters_guessed) < 5:
        letter_guessed = input('Guess a letter: ')
    else:
        if check_found(word_name, old_letters_guessed):
            show_hidden_word(word_name, old_letters_guessed)
        else:
            print("_ " * len(word_name))
        print("LOSE")

#C:\Users\user\Desktop\Master's Degree\Python\Python Campus Course\words.txt

# print(check_valid_input(letter_guessed, old_letters_guessed))
